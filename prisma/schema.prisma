generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model company {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description   String?         @db.VarChar(255)
  name          String          @db.VarChar(255)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  user_id       String          @db.Uuid
  tenant_id     String          @db.VarChar(255)
  user          user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  delivery_note delivery_note[]
}

model delivery_item {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String        @db.VarChar(255)
  quantity         Int
  price            Int?
  weight           Int?
  deadline         DateTime?     @db.Timestamp(6)
  delivery_note_id String        @db.Uuid
  created_at       DateTime      @default(now()) @db.Timestamp(6)
  updated_at       DateTime      @default(now()) @db.Timestamp(6)
  delivery_note    delivery_note @relation(fields: [delivery_note_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model delivery_note {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  note_number   String          @db.VarChar(255)
  issuer        String          @db.VarChar(255)
  addressee     String          @db.VarChar(255)
  company_id    String          @db.Uuid
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  delivery_item delivery_item[]
  company       company         @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  excel_import  excel_import[]
  invalid_note  invalid_note[]
}

model excel_import {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  file_name        String        @db.VarChar(255)
  imported_at      DateTime      @default(now()) @db.Timestamp(6)
  item_limit       Int?
  delivery_note_id String        @db.Uuid
  created_at       DateTime      @default(now()) @db.Timestamp(6)
  updated_at       DateTime      @default(now()) @db.Timestamp(6)
  delivery_note    delivery_note @relation(fields: [delivery_note_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model invalid_note {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  invalidated_at   DateTime      @default(now()) @db.Timestamp(6)
  reason           String?       @db.VarChar(255)
  delivery_note_id String        @db.Uuid
  created_at       DateTime      @default(now()) @db.Timestamp(6)
  updated_at       DateTime      @default(now()) @db.Timestamp(6)
  delivery_note    delivery_note @relation(fields: [delivery_note_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String    @unique @db.VarChar(255)
  firstName   String?   @db.VarChar(255)
  lastName    String?   @db.VarChar(255)
  roq_user_id String    @db.VarChar(255)
  tenant_id   String    @db.VarChar(255)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  company     company[]
}
